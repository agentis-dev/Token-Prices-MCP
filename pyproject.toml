[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "token-prices-mcp"
dynamic = ["version"]
description = "Message Control Protocol (MCP) server for retrieving cryptocurrency token prices from multiple blockchain sources"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.9"
authors = [
    {name = "Token Prices MCP", email = "contact@tokenprices.mcp"},
]
keywords = [
    "mcp",
    "cryptocurrency",
    "token-prices",
    "blockchain",
    "defi",
    "coingecko",
    "price-feeds",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Office/Business :: Financial",
]
dependencies = [
    "fastmcp>=0.2.0",
    "aiohttp>=3.9.0",
    "pydantic>=2.0.0",
    "web3>=6.0.0",
    "python-dotenv>=1.0.0",
    "asyncio-throttle>=1.0.0",
    "tenacity>=8.0.0",
    "cachetools>=5.0.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "pyright>=1.1.300",
    "pre-commit>=3.0.0",
    "httpx>=0.25.0",
]

[project.urls]
Homepage = "https://github.com/tokenprices/token-prices-mcp"
Repository = "https://github.com/tokenprices/token-prices-mcp"
Documentation = "https://github.com/tokenprices/token-prices-mcp#readme"
Issues = "https://github.com/tokenprices/token-prices-mcp/issues"

[project.scripts]
token-prices-mcp = "token_prices_mcp.cli:main"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src/token_prices_mcp"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.pyright]
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    ".venv",
    "venv",
]
defineConstant = {DEBUG = true}
stubPath = "typings"
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.9"
pythonPlatform = "All"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 